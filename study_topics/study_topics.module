<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Random;



/**
 * Implements hook_help().
 */
function study_topics_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.study_topics':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Study Topic module creates a taxonomy vocabulary Topics. ');
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('To create block instances of Topics vocabulary') . '</dt>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_entity_presave().
 */

function study_topics_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Route and bundle check.
  if ($entity->bundle() == 'topics' && $route_name != 'entity.taxonomy_term.edit_form') {
    // Generate a random id.
    $id = Random::name();
      $values = [
        // Adding a unique id for block.
        'id' => 'topic_' . $id,
        // Plugin block id as defined in placeholder block.
        'plugin' => 'topic_name',
        // Placing block in content region.
        'region' => 'content',
        'settings' => [
          'label' => $entity->name->value,
        ],
        // Theme name in which block will be placed.
        'theme' => 'bartik',
        'visibility' => [],
        'weight' => 100,
      ];
      // Creating a new block instance.
      $block = Block::create($values);
      $block->save();
      // Invalidating cache for all topic related blocks.
      Drupal\Core\Cache\Cache::invalidateTags(['topic_blocks_cache']);
    }
}
